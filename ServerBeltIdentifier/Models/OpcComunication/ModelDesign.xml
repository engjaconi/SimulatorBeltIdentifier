<?xml version="1.0" encoding="utf-8" ?>
<opc:ModelDesign
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:xsd="http://www.w3.org/2001/XMLSchema"
xmlns:opc="http://opcfoundation.org/UA/ModelDesign.xsd"
xmlns:ua="http://opcfoundation.org/UA/"
xmlns:uax="http://opcfoundation.org/UA/2008/02/Types.xsd"
xmlns="http://opcfoundation.org/BeltIdentifier"
TargetNamespace="http://opcfoundation.org/BeltIdentifier"
>

	<!--
  Esse elemento define os mapeamentos entre os URIs usados para identificar namespaces e os símbolos usados no código.
  Os arquivos de design definidos pelo usuário podem incluir outros arquivos de design definidos pelo usuário.
  O local dos arquivos de design incluídos é especificado com o atributo FilePath (caminho absoluto ou relativo sem o sufixo .xml).
  -->
	<opc:Namespaces>
		<opc:Namespace Name="OpcUa" Prefix="Opc.Ua" XmlNamespace="http://opcfoundation.org/UA/2008/02/Types.xsd">http://opcfoundation.org/UA/</opc:Namespace>
		<opc:Namespace Name="BeltIdentifier" Prefix="BeltIdentifier">http://opcfoundation.org/BeltIdentifier</opc:Namespace>
	</opc:Namespaces>

	<!--
  Defina tipos de base genéricos para os vários controladores, sensores e atuadores utilizados no modelo.
  -->
	<opc:ObjectType SymbolicName="GenericSensorType" BaseType="ua:BaseObjectType">
		<opc:Description>A generic sensor that read a process value.</opc:Description>
		<opc:Children>
			<opc:Variable SymbolicName="Output" DataType="ua:Boolean" ValueRank="Scalar" TypeDefinition="ua:AnalogItemType" AccessLevel="ReadWrite"/>
		</opc:Children>
	</opc:ObjectType>
	
	<opc:ObjectType SymbolicName="GenericActuatorType" BaseType="ua:BaseObjectType">
		<opc:Description>Represents a piece of equipment that causes some action to occur.</opc:Description>
		<opc:Children>
			<opc:Variable SymbolicName="Input" DataType="ua:Boolean" ValueRank="Scalar" TypeDefinition="ua:AnalogItemType" AccessLevel="ReadWrite"/>
		</opc:Children>
	</opc:ObjectType>
	
	<opc:ObjectType SymbolicName="GenericDisplayType" BaseType="ua:BaseObjectType">
		<opc:Description>A generic display.</opc:Description>
		<opc:Children>
			<opc:Variable SymbolicName="Input" DataType="ua:Int32" ValueRank="Scalar" TypeDefinition="ua:AnalogItemType" AccessLevel="ReadWrite"/>
		</opc:Children>
	</opc:ObjectType>
	
	<opc:ObjectType SymbolicName="GenericMotorType" BaseType="ua:BaseObjectType">
		<opc:Description>A generic motor.</opc:Description>
		<opc:Children>
			<opc:Variable SymbolicName="Speed" DataType="ua:Int32"  ValueRank="Scalar" TypeDefinition="ua:AnalogItemType" AccessLevel="ReadWrite"/>
			<opc:Variable SymbolicName="Status" DataType="ua:Boolean"  ValueRank="Scalar" TypeDefinition="ua:AnalogItemType" AccessLevel="ReadWrite"/>
		</opc:Children>
	</opc:ObjectType>

	<!--
  Define os tipos de concreto para os vários controladores, sensores e atuadores utilizados no modelo.
  -->
	<opc:ObjectType SymbolicName="OpticalBarrier" BaseType="GenericSensorType">
		<opc:Description>A sensor that reports the position of piece in a belt.</opc:Description>
	</opc:ObjectType>

	<opc:ObjectType SymbolicName="ElectricPhotoSensor" BaseType="GenericSensorType">
		<opc:Description>A sensor that reports you if the piece is transparent.</opc:Description>
	</opc:ObjectType>

	<opc:ObjectType SymbolicName="CapacitiveSensor" BaseType="GenericSensorType">
		<opc:Description>A sensor that reports you if the piece is not metallic.</opc:Description>
	</opc:ObjectType>

	<opc:ObjectType SymbolicName="InductiveSensor" BaseType="GenericSensorType">
		<opc:Description>A sensor that reports you if the piece is metallic.</opc:Description>
	</opc:ObjectType>

	<opc:ObjectType SymbolicName="OpaquePiece" BaseType="GenericActuatorType">
		<opc:Description>Opaque piece indication.</opc:Description>
	</opc:ObjectType>

	<opc:ObjectType SymbolicName="MetallicPiece" BaseType="GenericActuatorType">
		<opc:Description>Metallic piece indication.</opc:Description>
	</opc:ObjectType>

	<opc:ObjectType SymbolicName="NonMetallicPiece" BaseType="GenericActuatorType">
		<opc:Description>Non-Metallic piece indication.</opc:Description>
	</opc:ObjectType>

	<opc:ObjectType SymbolicName="ErrorIlumination" BaseType="GenericActuatorType">
		<opc:Description>Error indication light.</opc:Description>
	</opc:ObjectType>

	<opc:ObjectType SymbolicName="BusyIlumination" BaseType="GenericActuatorType">
		<opc:Description>Busy indication light.</opc:Description>
	</opc:ObjectType>

	<opc:ObjectType SymbolicName="QuantityOpaquePiece" BaseType="GenericDisplayType">
		<opc:Description>Reports the number of objects.</opc:Description>
	</opc:ObjectType>

	<opc:ObjectType SymbolicName="QuantityMetallicPiece" BaseType="GenericDisplayType">
		<opc:Description>Reports the number of objects.</opc:Description>
	</opc:ObjectType>

	<opc:ObjectType SymbolicName="QuantityNonMetallicPiece" BaseType="GenericDisplayType">
		<opc:Description>Reports the number of objects.</opc:Description>
	</opc:ObjectType>

	<opc:ObjectType SymbolicName="MotorType" BaseType="GenericMotorType">
		<opc:Description>An motor for moving object.</opc:Description>
	</opc:ObjectType>

	<!--
	Definir tipos de concreto para os componentes contidos na Planta de Lotes.
  Esses tipos de camada intermediária podem ser omitidos e declarados como pastas dentro do tipo de caldeira.
  No entanto, isso não produziria uma classe fortemente tipada.
  -->

	<opc:ObjectType SymbolicName="Module1Type" BaseType="ua:FolderType">
		<opc:Children>

			<opc:Object SymbolicName="Error" TypeDefinition="ErrorIlumination" SupportsEvents="true">
				<opc:BrowseName>Error</opc:BrowseName>
			</opc:Object>

			<opc:Object SymbolicName="Busy" TypeDefinition="BusyIlumination" SupportsEvents="true">
				<opc:BrowseName>Busy</opc:BrowseName>
			</opc:Object>

			<opc:Object SymbolicName="Opaque" TypeDefinition="OpaquePiece" SupportsEvents="true">
				<opc:BrowseName>Opaque</opc:BrowseName>
			</opc:Object>

			<opc:Object SymbolicName="Metallic" TypeDefinition="MetallicPiece" SupportsEvents="true">
				<opc:BrowseName>Metallic</opc:BrowseName>
			</opc:Object>

			<opc:Object SymbolicName="NonMetallic" TypeDefinition="NonMetallicPiece" SupportsEvents="true">
				<opc:BrowseName>NonMetallic</opc:BrowseName>
			</opc:Object>

			<opc:Object SymbolicName="QuantityOpaque" TypeDefinition="QuantityOpaquePiece" SupportsEvents="true">
				<opc:BrowseName>QuantityOpaque</opc:BrowseName>
			</opc:Object>
			
			<opc:Object SymbolicName="QuantityMetallic" TypeDefinition="QuantityMetallicPiece" SupportsEvents="true">
				<opc:BrowseName>QuantityMetallic</opc:BrowseName>
			</opc:Object>

			<opc:Object SymbolicName="QuantityNonMetallic" TypeDefinition="QuantityNonMetallicPiece" SupportsEvents="true">
				<opc:BrowseName>QuantityNonMetallic</opc:BrowseName>
			</opc:Object>

			<opc:Object SymbolicName="Motor" TypeDefinition="MotorType" SupportsEvents="true">
				<opc:BrowseName>Motor</opc:BrowseName>
			</opc:Object>

		</opc:Children>
		<opc:References>
			<opc:Reference>
				<opc:ReferenceType>ua:HasNotifier</opc:ReferenceType>
				<opc:TargetId>Module1Type_Error</opc:TargetId>
			</opc:Reference>
		</opc:References>
	</opc:ObjectType>

	<opc:ObjectType SymbolicName="Module2Type" BaseType="ua:FolderType">
		<opc:Children>

			<opc:Object SymbolicName="Barrier1" TypeDefinition="OpticalBarrier" SupportsEvents="true">
				<opc:BrowseName>Barrier1</opc:BrowseName>
			</opc:Object>
			<opc:Object SymbolicName="Barrier2" TypeDefinition="OpticalBarrier" SupportsEvents="true">
				<opc:BrowseName>Barrier2</opc:BrowseName>
			</opc:Object>
			<opc:Object SymbolicName="Barrier3" TypeDefinition="OpticalBarrier" SupportsEvents="true">
				<opc:BrowseName>Barrier3</opc:BrowseName>
			</opc:Object>

			<opc:Object SymbolicName="PhotoSensor" TypeDefinition="ElectricPhotoSensor" SupportsEvents="true">
				<opc:BrowseName>PhotoSensor</opc:BrowseName>
			</opc:Object>
			<opc:Object SymbolicName="Capacitive" TypeDefinition="CapacitiveSensor" SupportsEvents="true">
				<opc:BrowseName>Capacitive</opc:BrowseName>
			</opc:Object>
			<opc:Object SymbolicName="Inductive" TypeDefinition="InductiveSensor" SupportsEvents="true">
				<opc:BrowseName>Inductive</opc:BrowseName>
			</opc:Object>

			<opc:Object SymbolicName="Error" TypeDefinition="ErrorIlumination" SupportsEvents="true">
				<opc:BrowseName>Error</opc:BrowseName>
			</opc:Object>

			<opc:Object SymbolicName="Busy" TypeDefinition="BusyIlumination" SupportsEvents="true">
				<opc:BrowseName>Busy</opc:BrowseName>
			</opc:Object>

			<opc:Object SymbolicName="Motor" TypeDefinition="MotorType" SupportsEvents="true">
				<opc:BrowseName>Motor</opc:BrowseName>
			</opc:Object>

		</opc:Children>
		<opc:References>
			<opc:Reference>
				<opc:ReferenceType>ua:HasNotifier</opc:ReferenceType>
				<opc:TargetId>Module2Type_Barrier1</opc:TargetId>
			</opc:Reference>
		</opc:References>
	</opc:ObjectType>

	<!--
  Declare o tipo de planta em lote junto com todas as referências entre os diferentes componentes.
  Adicionar referências entre componentes requer que eles sejam substituídos. 
  Os nós substituídos só precisam se importar com o NodeType correto e o SymbolicName; todos os outros
  parâmetros são inicializados a partir da declaração original. Quaisquer parâmetros que sejam explicitamente
  especificados substituem a declaração original e são utilizados mesmo que a declaração original
  é alterado.
  As referências são especificadas construindo os SymbolicIds para os componentes inserindo
  um '_' entre cada SymbolicName. Isso significa que um '_' não pode fazer parte de um SymbolicName.
  -->
	<opc:ObjectType SymbolicName="BeltType" BaseType="ua:BaseObjectType" SupportsEvents="true">
		<opc:Description>A production belt.</opc:Description>
		<opc:Children>

			<opc:Object SymbolicName="Module1" TypeDefinition="Module1Type" SupportsEvents="true">
				<opc:BrowseName>Belt Module 1</opc:BrowseName>
			</opc:Object>

			<opc:Object SymbolicName="Module2" TypeDefinition="Module2Type" SupportsEvents="true">
				<opc:BrowseName>Belt Module 2</opc:BrowseName>
			</opc:Object>

			<opc:Method SymbolicName="StartModule1Process" ModellingRule="Mandatory"></opc:Method>
			<opc:Method SymbolicName="StopModule1Process" ModellingRule="Mandatory"></opc:Method>
			<opc:Method SymbolicName="ResetModule1Process" ModellingRule="Mandatory"></opc:Method>
			<opc:Method SymbolicName="StartModule2Process" ModellingRule="Mandatory"></opc:Method>
			<opc:Method SymbolicName="StopModule2Process" ModellingRule="Mandatory"></opc:Method>
			<opc:Method SymbolicName="ResetModule2Process" ModellingRule="Mandatory"></opc:Method>

		</opc:Children>

		<opc:References>
			<opc:Reference>
				<opc:ReferenceType>ua:HasNotifier</opc:ReferenceType>
				<opc:TargetId>BeltType_Module1</opc:TargetId>
			</opc:Reference>
		</opc:References>

	</opc:ObjectType>

	<!--
  Normalmente, as instâncias são criadas pela lógica do programa em vez de fazer parte do modelo.
  Isso é fornecido como um exemplo de como fazê-lo quando há necessidade de instâncias persistentes.
  Observe que os DisplayNames são substituídos para os nós de nível básico.
  -->
	<opc:Object SymbolicName="BeltServer" TypeDefinition="BeltType" SupportsEvents="true">
		<opc:BrowseName>Belt Server #1</opc:BrowseName>
		<!--
   Vincular a instância de volta ao ObjectsFolder
    -->
		<opc:References>
			<opc:Reference IsInverse="true">
				<opc:ReferenceType>ua:Organizes</opc:ReferenceType>
				<opc:TargetId>ua:ObjectsFolder</opc:TargetId>
			</opc:Reference>
		</opc:References>

	</opc:Object>

</opc:ModelDesign>

